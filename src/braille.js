(function (root, factory){
    if(typeof define === 'function' && define.amd){
        // AMD. Register as an anonymous module.
        define(['./double-char'], factory);
    }else if (typeof module === 'object' && module.exports){
        module.exports = factory(require('./double-char'));
    }else{
        // Browser globals (root is window)
        if(!root.Ascii) root.Ascii = {};
        if(!root.Ascii.Char) root.Ascii.Char = {};
        root.Ascii.Char.BrailleTransformer = factory(root.Ascii.Char.DoubleCharTransformer);
    }
}(this, function(Transformer){
    /**
    * Generate threshold maps as braille characters
    * @module @ansi-art/char-subgrid/src/braille
    */
    var brailleMap = {
        '1':'⠁','2':'⠂','3':'⠄','4':'⡀','5':'⠈','6':'⠐','7':'⠠','8':'⢀','12':'⠃',
        '13':'⠅','14':'⡁','15':'⠉','16':'⠑','17':'⠡','18':'⢁','23':'⠆','24':'⡂',
        '25':'⠊','26':'⠒','27':'⠢','28':'⢂','34':'⡄','35':'⠌','36':'⠔','37':'⠤',
        '38':'⢄','45':'⡈','46':'⡐','47':'⡠','48':'⣀','56':'⠘','57':'⠨','58':'⢈',
        '67':'⠰','68':'⢐','78':'⢠','123':'⠇','124':'⡃','125':'⠋','126':'⠓',
        '127':'⠣','128':'⢃','134':'⡅','135':'⠍','136':'⠕','137':'⠥','138':'⢅',
        '145':'⡉','146':'⡑','147':'⡡','148':'⣁','156':'⠙','157':'⠩','158':'⢉',
        '167':'⠱','168':'⢑','178':'⢡','234':'⡆','235':'⠎','236':'⠖','237':'⠦',
        '238':'⢆','245':'⡊','246':'⡒','247':'⡢','248':'⣂','256':'⠚','257':'⠪',
        '258':'⢊','267':'⠲','268':'⢒','278':'⢢','345':'⡌','346':'⡔','347':'⡤',
        '348':'⣄','356':'⠜','357':'⠬','358':'⢌','367':'⠴','368':'⢔','378':'⢤',
        '456':'⡘','457':'⡨','458':'⣈','467':'⡰','468':'⣐','478':'⣠','567':'⠸',
        '568':'⢘','578':'⢨','678':'⢰','1234':'⡇','1235':'⠏','1236':'⠗','1237':'⠧',
        '1238':'⢇','1245':'⡋','1246':'⡓','1247':'⡣','1248':'⣃','1256':'⠛',
        '1257':'⠫','1258':'⢋','1267':'⠳','1268':'⢓','1278':'⢣','1345':'⡍',
        '1346':'⡕','1347':'⡥','1348':'⣅','1356':'⠝','1357':'⠭','1358':'⢍',
        '1367':'⠵','1368':'⢕','1378':'⢥','1456':'⡙','1457':'⡩','1458':'⣉',
        '1467':'⡱','1468':'⣑','1478':'⣡','1567':'⠹','1568':'⢙','1578':'⢩',
        '1678':'⢱','2345':'⡎','2346':'⡖','2347':'⡦','2348':'⣆','2356':'⠞',
        '2357':'⠮','2358':'⢎','2367':'⠶','2368':'⢖','2378':'⢦','2456':'⡚',
        '2457':'⡪','2458':'⣊','2467':'⡲','2468':'⣒','2478':'⣢','2567':'⠺',
        '2568':'⢚','2578':'⢪','2678':'⢲','3456':'⡜','3457':'⡬','3458':'⣌',
        '3467':'⡴','3468':'⣔','3478':'⣤','3567':'⠼','3568':'⢜','3578':'⢬',
        '3678':'⢴','4567':'⡸','4568':'⣘','4578':'⣨','4678':'⣰','5678':'⢸',
        '12345':'⡏','12346':'⡗','12347':'⡧','12348':'⣇','12356':'⠟','12357':'⠯',
        '12358':'⢏','12367':'⠷','12368':'⢗','12378':'⢧','12456':'⡛','12457':'⡫',
        '12458':'⣋','12467':'⡳','12468':'⣓','12478':'⣣','12567':'⠻','12568':'⢛',
        '12578':'⢫','12678':'⢳','13456':'⡝','13457':'⡭','13458':'⣍','13467':'⡵',
        '13468':'⣕','13478':'⣥','13567':'⠽','13568':'⢝','13578':'⢭','13678':'⢵',
        '14567':'⡹','14568':'⣙','14578':'⣩','14678':'⣱','15678':'⢹','23456':'⡞',
        '23457':'⡮','23458':'⣎','23467':'⡶','23468':'⣖','23478':'⣦','23567':'⠾',
        '23568':'⢞','23578':'⢮','23678':'⢶','24567':'⡺','24568':'⣚','24578':'⣪',
        '24678':'⣲','25678':'⢺','34567':'⡼','34568':'⣜','34578':'⣬','34678':'⣴',
        '35678':'⢼','45678':'⣸','123456':'⡟','123457':'⡯','123458':'⣏',
        '123467':'⡷','123468':'⣗','123478':'⣧','123567':'⠿','123568':'⢟',
        '123578':'⢯','123678':'⢷','124567':'⡻','124568':'⣛','124578':'⣫',
        '124678':'⣳','125678':'⢻','134567':'⡽','134568':'⣝','134578':'⣭',
        '134678':'⣵','135678':'⢽','145678':'⣹','234567':'⡾','234568':'⣞',
        '234578':'⣮','234678':'⣶','235678':'⢾','245678':'⣺','345678':'⣼',
        '1234567':'⡿','1234568':'⣟','1234578':'⣯','1234678':'⣷','1235678':'⢿',
        '1245678':'⣻','1345678':'⣽','2345678':'⣾','12345678':'⣿','':'⠀'
    };
    /**
     * UTF Block based SubGridTransformer
     * @class AsciiCharBlocksTransformer
     * @classdesc This transformer takes a threshold map and converts them to binary values using 4 bits per character
     * @extends AsciiCharDoubleCharTransformer
     */
    return Transformer.extend({
        braille : function(value){
            return this.transform(value);
        }
    }, function(){
        this.map = brailleMap;
    });
}));

// the map, as defined by UTF(problematic for our use case)
// we converted from 12356748 -> 12345678 for saner handling
// | 1 4 |
// | 2 5 |
// | 3 6 |
// | 7 8 |
/*
var brailleMap = {
    '1': '⠁', '2': '⠂', '3': '⠄', '4': '⠈', '5': '⠐', '6': '⠠', '7': '⡀',
  '8': '⢀', '12': '⠃', '13': '⠅', '14': '⠉', '15': '⠑', '16': '⠡', '17': '⡁',
  '18': '⢁', '23': '⠆', '24': '⠊', '25': '⠒', '26': '⠢', '27': '⡂', '28': '⢂',
  '34': '⠌', '35': '⠔', '36': '⠤', '37': '⡄', '38': '⢄', '45': '⠘', '46': '⠨',
  '47': '⡈', '48': '⢈', '56': '⠰', '57': '⡐', '58': '⢐', '67': '⡠', '68': '⢠',
  '78': '⣀', '123': '⠇', '124': '⠋', '125': '⠓', '126': '⠣', '127': '⡃',
  '128': '⢃', '134': '⠍', '135': '⠕', '136': '⠥', '137': '⡅', '138': '⢅',
  '145': '⠙', '146': '⠩', '147': '⡉', '148': '⢉', '156': '⠱', '157': '⡑',
  '158': '⢑', '167': '⡡', '168': '⢡', '178': '⣁', '234': '⠎', '235': '⠖',
  '236': '⠦', '237': '⡆', '238': '⢆', '245': '⠚', '246': '⠪', '247': '⡊',
  '248': '⢊', '256': '⠲', '257': '⡒', '258': '⢒', '267': '⡢', '268': '⢢',
  '278': '⣂', '345': '⠜', '346': '⠬', '347': '⡌', '348': '⢌', '356': '⠴',
  '357': '⡔', '358': '⢔', '367': '⡤', '368': '⢤', '378': '⣄', '456': '⠸',
  '457': '⡘', '458': '⢘', '467': '⡨', '468': '⢨', '478': '⣈', '567': '⡰',
  '568': '⢰', '578': '⣐', '678': '⣠', '1234': '⠏', '1235': '⠗', '1236': '⠧',
  '1237': '⡇', '1238': '⢇', '1245': '⠛', '1246': '⠫', '1247': '⡋', '1248': '⢋',
  '1256': '⠳', '1257': '⡓', '1258': '⢓', '1267': '⡣', '1268': '⢣', '1278': '⣃',
  '1345': '⠝', '1346': '⠭', '1347': '⡍', '1348': '⢍', '1356': '⠵', '1357': '⡕',
  '1358': '⢕', '1367': '⡥', '1368': '⢥', '1378': '⣅', '1456': '⠹', '1457': '⡙',
  '1458': '⢙', '1467': '⡩', '1468': '⢩', '1478': '⣉', '1567': '⡱', '1568': '⢱',
  '1578': '⣑', '1678': '⣡', '2345': '⠞', '2346': '⠮', '2347': '⡎', '2348': '⢎',
  '2356': '⠶', '2357': '⡖', '2358': '⢖', '2367': '⡦', '2368': '⢦', '2378': '⣆',
  '2456': '⠺', '2457': '⡚', '2458': '⢚', '2467': '⡪', '2468': '⢪', '2478': '⣊',
  '2567': '⡲', '2568': '⢲', '2578': '⣒', '2678': '⣢', '3456': '⠼', '3457': '⡜',
  '3458': '⢜', '3467': '⡬', '3468': '⢬', '3478': '⣌', '3567': '⡴', '3568': '⢴',
  '3578': '⣔', '3678': '⣤', '4567': '⡸', '4568': '⢸', '4578': '⣘', '4678': '⣨',
  '5678': '⣰', '12345': '⠟', '12346': '⠯', '12347': '⡏', '12348': '⢏',
  '12356': '⠷', '12357': '⡗', '12358': '⢗', '12367': '⡧', '12368': '⢧',
  '12378': '⣇', '12456': '⠻', '12457': '⡛', '12458': '⢛', '12467': '⡫',
  '12468': '⢫', '12478': '⣋', '12567': '⡳', '12568': '⢳', '12578': '⣓',
  '12678': '⣣', '13456': '⠽', '13457': '⡝', '13458': '⢝', '13467': '⡭',
  '13468': '⢭', '13478': '⣍', '13567': '⡵', '13568': '⢵', '13578': '⣕',
  '13678': '⣥', '14567': '⡹', '14568': '⢹', '14578': '⣙', '14678': '⣩',
  '15678': '⣱', '23456': '⠾', '23457': '⡞', '23458': '⢞', '23467': '⡮',
  '23468': '⢮', '23478': '⣎', '23567': '⡶', '23568': '⢶', '23578': '⣖',
  '23678': '⣦', '24567': '⡺', '24568': '⢺', '24578': '⣚', '24678': '⣪',
  '25678': '⣲', '34567': '⡼', '34568': '⢼', '34578': '⣜', '34678': '⣬',
  '35678': '⣴', '45678': '⣸', '123456': '⠿', '123457': '⡟', '123458': '⢟',
  '123467': '⡯', '123468': '⢯', '123478': '⣏', '123567': '⡷', '123568': '⢷',
  '123578': '⣗', '123678': '⣧', '124567': '⡻', '124568': '⢻', '124578': '⣛',
  '124678': '⣫', '125678': '⣳', '134567': '⡽', '134568': '⢽', '134578': '⣝',
  '134678': '⣭', '135678': '⣵', '145678': '⣹', '234567': '⡾', '234568': '⢾',
  '234578': '⣞', '234678': '⣮', '235678': '⣶', '245678': '⣺', '345678': '⣼',
  '1234567': '⡿', '1234568': '⢿', '1234578': '⣟', '1234678': '⣯',
  '1235678': '⣷', '1245678': '⣻', '1345678': '⣽', '2345678': '⣾',
  '12345678': '⣿', '': '⠀'
} */